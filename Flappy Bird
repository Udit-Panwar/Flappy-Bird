import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

public class FlappyBird implements ActionListener, KeyListener {

    JFrame jframe;
    JPanel panel;
    Timer timer;
    ArrayList<Rectangle> pipes;
    int ticks, yMotion, score;
    boolean gameOver, gameStarted;
    final int WIDTH = 800, HEIGHT = 600;
    final int PIPE_WIDTH = 100, PIPE_HEIGHT = 50, SPACE = 300;
    Rectangle bird;

    public FlappyBird() {
        jframe = new JFrame();
        panel = new GamePanel();

        timer = new Timer(20, this);

        jframe.setTitle("Flappy Bird");
        jframe.setSize(WIDTH, HEIGHT);
        jframe.add(panel);
        jframe.addKeyListener(this);
        jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jframe.setVisible(true);

        bird = new Rectangle(WIDTH / 2 - 10, HEIGHT / 2 - 10, 20, 20);
        pipes = new ArrayList<>();

        addPipe(true);
        addPipe(true);
        addPipe(true);
        addPipe(true);

        timer.start();
    }

    public void addPipe(boolean start) {
        int height = 50 + new Random().nextInt(300);

        if (start) {
            pipes.add(new Rectangle(WIDTH + pipes.size() * 200, HEIGHT - height - 120, PIPE_WIDTH, height));
            pipes.add(new Rectangle(WIDTH + pipes.size() * 200, 0, PIPE_WIDTH, HEIGHT - height - SPACE));
        } else {
            pipes.add(new Rectangle(pipes.get(pipes.size() - 1).x + 400, HEIGHT - height - 120, PIPE_WIDTH, height));
            pipes.add(new Rectangle(pipes.get(pipes.size() - 1).x, 0, PIPE_WIDTH, HEIGHT - height - SPACE));
        }
    }

    public void jump() {
        if (gameOver) {
            bird = new Rectangle(WIDTH / 2 - 10, HEIGHT / 2 - 10, 20, 20);
            pipes.clear();
            yMotion = 0;
            score = 0;

            addPipe(true);
            addPipe(true);
            addPipe(true);
            addPipe(true);

            gameOver = false;
        }

        if (!gameStarted) {
            gameStarted = true;
        }

        if (yMotion > 0) {
            yMotion = 0;
        }

        yMotion -= 10;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        int speed = 10;
        ticks++;

        if (gameStarted) {
            for (int i = 0; i < pipes.size(); i++) {
                Rectangle pipe = pipes.get(i);
                pipe.x -= speed;
            }

            if (ticks % 2 == 0 && yMotion < 15) {
                yMotion += 2;
            }

            for (int i = 0; i < pipes.size(); i++) {
                Rectangle pipe = pipes.get(i);

                if (pipe.x + pipe.width < 0) {
                    pipes.remove(pipe);
                    if (pipe.y == 0) {
                        addPipe(false);
                    }
                }
            }

            bird.y += yMotion;

            for (Rectangle pipe : pipes) {
                if (pipe.intersects(bird)) {
                    gameOver = true;
                    bird.x = pipe.x - bird.width;
                }
            }

            if (bird.y > HEIGHT - 120 || bird.y < 0) {
                gameOver = true;
            }

            for (Rectangle pipe : pipes) {
                if (pipe.y == 0 && bird.x + bird.width / 2 > pipe.x + pipe.width / 2 - 5 &&
                        bird.x + bird.width / 2 < pipe.x + pipe.width / 2 + 5) {
                    score++;
                }
            }
        }

        panel.repaint();
    }

    public class GamePanel extends JPanel {

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);

            g.setColor(Color.cyan);
            g.fillRect(0, 0, WIDTH, HEIGHT);

            g.setColor(Color.orange);
            g.fillRect(0, HEIGHT - 120, WIDTH, 120);

            g.setColor(Color.green);
            g.fillRect(0, HEIGHT - 120, WIDTH, 20);

            g.setColor(Color.red);
            g.fillRect(bird.x, bird.y, bird.width, bird.height);

            for (Rectangle pipe : pipes) {
                g.setColor(Color.green.darker());
                g.fillRect(pipe.x, pipe.y, pipe.width, pipe.height);
            }

            g.setColor(Color.white);
            g.setFont(new Font("Arial", Font.BOLD, 100));

            if (!gameStarted) {
                g.drawString("Press SPACE", 200, HEIGHT / 2 - 50);
            }

            if (gameOver) {
                g.drawString("Game Over", 200, HEIGHT / 2 - 50);
            }

            if (!gameOver && gameStarted) {
                g.setFont(new Font("Arial", Font.BOLD, 50));
                g.drawString(String.valueOf(score), WIDTH / 2 - 25, 100);
            }
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_SPACE) {
            jump();
        }
    }

    @Override public void keyReleased(KeyEvent e) {}
    @Override public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        new FlappyBird();
    }
}
